#Application Name
spring.application.name=cloud-gateway-service

#Port of the application
server.port=8181

server.ssl.enabled=true
server.ssl.key-store=classpath:keystore.p12
server.ssl.key-store-password=Rajiv@379
server.ssl.key-store-type=PKCS12

#Spring profile
#spring.profiles.active=${SPRING_ACTIVE_PROFILE:kubernetes}
spring.cloud.kubernetes.discovery.all-namespaces=true

#It is worth mentioning that user-service acts as a Eureka client. So, we give it a name, port, and link to Eureka server 
# eureka server url for discover services
#eureka.client.service-url.default-zone=http://localhost:8761/eureka
eureka.client.enabled=false
eureka.client.serviceUrl.registerWithEureka=false

spring.sleuth.sampler.probability = 1.0

hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=5000000
ribbon.ReadTimeout=20000000
ribbon.ConnectTimeout=20000000

spring.cloud.gateway.default-filters=TokenRelay

##KEYCLOAK configuration
app.config.keycloak.baseUrl=http://192.168.49.2:30080
app.config.keycloak.url=http://192.168.49.2:30080/auth
app.config.keycloak.realm=oauth2-bjjd-system-realm

## KEYCLOAK AS RESOURCE SERVER
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${app.config.keycloak.baseUrl}/realms/${app.config.keycloak.realm}/protocol/openid-connect/certs

## API SECURITY WITH KEYCLOAK PROVIDER
spring.security.oauth2.client.provider.keycloak.issuer-uri=${app.config.keycloak.baseUrl}/realms/${app.config.keycloak.realm}

#Optional Parameters
spring.security.oauth2.client.provider.keycloak.jwk-set-uri=${app.config.keycloak.baseUrl}/realms/${app.config.keycloak.realm}/protocol/openid-connect/certs
spring.security.oauth2.client.provider.keycloak.token-uri=${app.config.keycloak.baseUrl}/realms/${app.config.keycloak.realm}/protocol/openid-connect/token
spring.security.oauth2.client.provider.keycloak.user-info-authentication-method=header
spring.security.oauth2.client.provider.keycloak.user-info-uri=${app.config.keycloak.baseUrl}/realms/${app.config.keycloak.realm}/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.keycloak.authorization-uri=${app.config.keycloak.baseUrl}/realms/${app.config.keycloak.realm}/protocol/openid-connect/auth

## API WITH KEYCLOAK : oauth2-bjjd-system-client This is the client we created in Keycloak server
spring.security.oauth2.client.registration.oauth2-bjjd-system-client.provider=keycloak
spring.security.oauth2.client.registration.oauth2-bjjd-system-client.client-id=oauth2-bjjd-system-client
spring.security.oauth2.client.registration.oauth2-bjjd-system-client.client-secret=E7oIzMZZFG3a8e0tJvpWDU6ln3kpfhb2
spring.security.oauth2.client.registration.oauth2-bjjd-system-client.scope=openid, profile, roles
#spring.security.oauth2.client.registration.oauth2-bjjd-system-client.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.oauth2-bjjd-system-client.redirect-uri=${app.config.keycloak.baseUrl}/login/oauth2/code/keycloak
